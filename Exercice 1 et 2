/**
 * \file skeleton.c
 * \brief Basic parsing options skeleton.
 * \author Pierre L. <pierre1.leroy@orange.com>
 * \version 0.1
 * \date 10 septembre 2016
 *
 * Basic parsing options skeleton exemple c file.
 */
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<errno.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>


#include<getopt.h>


#define STDOUT 1
#define STDERR 2

#define MAX_PATH_LENGTH 4096


#define USAGE_SYNTAX "[OPTIONS] -i INPUT -o OUTPUT"
#define USAGE_PARAMS "OPTIONS:\n\
  -i, --input  INPUT_FILE  : input file\n\
  -o, --output OUTPUT_FILE : output file\n\
***\n\
  -v, --verbose : enable *verbose* mode\n\
  -h, --help    : display this help\n\
"

/**
 * Procedure which displays binary usage
 * by printing on stdout all available options
 *
 * \return void
 */
void print_usage(char* bin_name)
{
  dprintf(1, "USAGE: %s %s\n\n%s\n", bin_name, USAGE_SYNTAX, USAGE_PARAMS);
}


/**
 * Procedure checks if variable must be free
 * (check: ptr != NULL)
 *
 * \param void* to_free pointer to an allocated mem
 * \see man 3 free
 * \return void
 */
void free_if_needed(void* to_free)
{
  if (to_free != NULL) free(to_free);  
}


/**
 *
 * \see man 3 strndup
 * \see man 3 perror
 * \return
 */
char* dup_optarg_str()
{
  char* str = NULL;

  if (optarg != NULL)
  {
    str = strndup(optarg, MAX_PATH_LENGTH);
    
    // Checking if ERRNO is set
    if (str == NULL) 
      perror(strerror(errno));
  }

  return str;
}


/**
 * Binary options declaration
 * (must end with {0,0,0,0})
 *
 * \see man 3 getopt_long or getopt
 * \see struct option definition
 */
static struct option binary_opts[] = 
{
  { "help",    no_argument,       0, 'h' },
  { "verbose", no_argument,       0, 'v' },
  { "input",   required_argument, 0, 'i' },
  { "output",  required_argument, 0, 'o' },
  { 0,         0,                 0,  0  } 
};

/**
 * Binary options string
 * (linked to optionn declaration)
 *
 * \see man 3 getopt_long or getopt
 */ 
const char* binary_optstr = "hvi:o:";



/**
 * Binary main loop
 *
 * \return 1 if it exit successfully 
 */
int main(int argc, char** argv)
{
  /**
   * Binary variables
   * (could be defined in a structure)
   */
  short int is_verbose_mode = 0;
  char* bin_input_param = NULL;
  char* bin_output_param = NULL;

  // Parsing options
  int opt = -1;
  int opt_idx = -1;

  while ((opt = getopt_long(argc, argv, binary_optstr, binary_opts, &opt_idx)) != -1)
  {
    switch (opt)
    {
      case 'i':
        //input param
        if (optarg)
        {
          bin_input_param = dup_optarg_str();         
        }
        break;
      case 'o':
        //output param
        if (optarg)
        {
          bin_output_param = dup_optarg_str();
        }
        break;
      case 'v':
        //verbose mode
        is_verbose_mode = 1;
        break;
      case 'h':
        print_usage(argv[0]);

        free_if_needed(bin_input_param);
        free_if_needed(bin_output_param);
 
        exit(EXIT_SUCCESS);
      default :
        break;
    }
  } 




	
	 

  
  
    //************************************************************************************************************************************************************
    //EXERCICE 1 - MATTHIEU BOSC
	//************************************************************************************************************************************************************

 if (bin_input_param != NULL && bin_output_param != NULL)
  {
  
	  int file;     						   						 //File descriptor of input file
	  int file2;	   					      					     //File descriptor of output file
	  struct stat buf;											     //Variable to store file size

	  //size_t nbytes=128;  					 					 //maximum size (in bytes) to read / write
	  stat(bin_input_param, &buf);                                   //storing parameters of input file in "buf"
	  int size= buf.st_size;								         //Variable containing size of the input file
	  char data[size];   					   					     //Content of file is stored in "data"
	  
	  
	  file= open(bin_input_param,O_RDONLY);  					     //Opening the input file in read only
	  read(file,data,size);  									     //Reading the file, storing its content in "data"
	  file2 = open(bin_output_param, O_CREAT | O_WRONLY | O_APPEND); //Open (or create) file f2, write only
	  write(file2,data,size);  									     //Writing the content of f1 in f2
	  
	  
	  // Freeing allocated data
	  free_if_needed(bin_input_param);
	  free_if_needed(bin_output_param);
	  return EXIT_SUCCESS; 
  }

  
 
 
	//************************************************************************************************************************************************************
	//FIN  EXERCICE 1
	//************************************************************************************************************************************************************

	
	
	

	//************************************************************************************************************************************************************
	//EXERCICE 2 - MATTHIEU BOSC
	//************************************************************************************************************************************************************
		
	 
	 if (bin_input_param != NULL && bin_output_param == NULL)
  { 
		 int filed;     						   					 //File descriptor of input file
		 struct stat buf;											 //Variable to store file size
										 	         
		 int i;
		 filed = open(bin_input_param,O_RDONLY);				     //Opening the input file in read only
		 stat(bin_input_param, &buf);
		 int size= buf.st_size;									     //Getting the size of the file
		
		 
		 char data[size];                                            //File content will be there
		 
		 for(i=size; i != -1; i--)							         //Loop repeated as many times as there are characters in the file
		 {
		 lseek(filed,i,SEEK_SET);								     //Setting offset from end of the file to beginning
		 read(filed,data,1);										 //Read the character
		 fprintf(stdout,"%s",data);									 //Display the character
		 }
		
		 
		 printf("\n\n");
		 free_if_needed(bin_input_param);
		 free_if_needed(bin_output_param);
		 
	   return EXIT_SUCCESS;	
  }
  
	//************************************************************************************************************************************************************
	//FIN  EXERCICE 2
	//************************************************************************************************************************************************************
	

	
	
	//************************************************************************************************************************************************************
	//EXERCICE 3 - MATTHIEU BOSC
	//************************************************************************************************************************************************************
		
		
/*		
		
		
		
		 free_if_needed(bin_input_param);
		 free_if_needed(bin_output_param);
		 
	   return EXIT_SUCCESS;
	   
	   

*/

	//************************************************************************************************************************************************************
	//FIN  EXERCICE 3
	//************************************************************************************************************************************************************
  
  /* LOREM IPSUM DOT SIR AMET */



	

  
  
  
  
   /**
   * Checking binary requirements
   * (could defined in a separate function)
   */
  else
  { 
    dprintf(STDERR, "Bad usage! See HELP [--help|-h]\n");

    // Freeing allocated data
    free_if_needed(bin_input_param);
    free_if_needed(bin_output_param);
    // Exiting with a failure ERROR CODE (== 1)
    exit(EXIT_FAILURE);
  } 
  
  
  
  
  
  
  
  // Printing params
  dprintf(1, "** PARAMS **\n%-8s: %s\n%-8s: %s\n%-8s: %d\n", 
          "input",   bin_input_param, 
          "output",  bin_output_param, 
          "verbose", is_verbose_mode);

  // Business logic must be implemented at this point

  
  
   free_if_needed(bin_input_param);
  free_if_needed(bin_output_param);


  return EXIT_SUCCESS;
  
  
  

  
  
}
